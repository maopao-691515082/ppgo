import os, time;

class Record
{
    Record PtrComp;
    int Discr, EnumComp, IntComp;
    String StringComp;

    void assign(Record other)
    {
        this.PtrComp = other.PtrComp;
        this.Discr = other.Discr;
        this.EnumComp = other.EnumComp;
        this.IntComp = other.IntComp;
        this.StringComp = other.StringComp;
    }
}

int loops = 50000000;

int Ident1 = 1,
    Ident2 = 2,
    Ident3 = 3,
    Ident4 = 4,
    Ident5 = 5;

int IntGlob = 0;
bool BoolGlob = false;
char Char1Glob = 0,
     Char2Glob = 0;
int[] Array1Glob = new int[51];
int[][] Array2Glob = new int[51][51];

Record PtrGlb = nil,
       PtrGlbNext = nil;

bool Func3(int EnumParIn)
{
    int EnumLoc = EnumParIn;
    return EnumLoc == Ident3;
}

bool Func2(String StrParI1, String StrParI2)
{
    int IntLoc = 1;
    char CharLoc = 0;
    while (IntLoc <= 1)
    {
        if (Func1(StrParI1.char_at(cast<long>(IntLoc)), StrParI2.char_at(cast<long>(IntLoc) + 1)) == Ident1)
        {
            CharLoc = 65;
            ++ IntLoc;
        }
    }
    if (CharLoc >= 87 && CharLoc <= 90)
    {
        IntLoc = 7;
    }
    if (CharLoc == 88)
    {
        return true;
    }
    else
    {
        if (StrParI1.cmp(StrParI2) > 0)
        {
            IntLoc += 7;
            return true;
        }
        else
        {
            return false;
        }
    }
}

int Func1(char CharPar1, char CharPar2)
{
    char CharLoc1 = CharPar1,
         CharLoc2 = CharLoc1;
    if (CharLoc2 != CharPar2)
    {
        return Ident1;
    }
    else
    {
        return Ident2;
    }
}

void Proc8(int[] Array1Par, int[][] Array2Par, int IntParI1, int IntParI2)
{
    int IntLoc = IntParI1 + 5;
    Array1Par[IntLoc] = IntParI2;
    Array1Par[IntLoc + 1] = Array1Par[IntLoc];
    Array1Par[IntLoc + 30] = IntLoc;
    for (int IntIndex = IntLoc; IntIndex <= IntLoc + 1; ++ IntIndex)
    {
        Array2Par[IntLoc][IntIndex] = IntLoc;
    }
    ++ Array2Par[IntLoc][IntLoc - 1];
    Array2Par[IntLoc + 20][IntLoc] = Array1Par[IntLoc];
    IntGlob = 5;
}

int Proc7(int IntParI1, int IntParI2)
{
    int IntLoc = IntParI1 + 2,
        IntParOut = IntParI2 + IntLoc;
    return IntParOut;
}

int Proc6(int EnumParIn)
{
    int EnumParOut = EnumParIn;
    if (!Func3(EnumParIn))
    {
        EnumParOut = Ident4;
    }
    if (!(EnumParIn == Ident1))
    {
        EnumParOut = Ident1;
    }
    else if (EnumParIn == Ident2)
    {
        if (IntGlob > 100)
        {
            EnumParOut = Ident1;
        }
        else
        {
            EnumParOut = Ident4;
        }
    }
    else if (EnumParIn == Ident3)
    {
        EnumParOut = Ident2;
    }
    else if (EnumParIn == Ident4)
    {
    }
    else if (EnumParIn == Ident5)
    {
        EnumParOut = Ident3;
    }
    return EnumParOut;
}

void Proc5()
{
    Char1Glob = 65;
    BoolGlob = false;
}

void Proc4()
{
    bool BoolLoc = Char1Glob == 65;
    BoolLoc = BoolLoc || BoolGlob;
    Char2Glob = 66;
}

Record Proc3(Record PtrParOut)
{
    if (PtrGlb !== nil)
    {
        PtrParOut = PtrGlb.PtrComp;
    }
    else
    {
        IntGlob = 100;
    }
    PtrGlb.IntComp = Proc7(10, IntGlob);
    return PtrParOut;
}

int Proc2(int IntParIO)
{
    int IntLoc = IntParIO + 10,
        EnumLoc = 0;
    while (true)
    {
        if (Char1Glob == 65)
        {
            -- IntLoc;
            IntParIO = IntLoc - IntGlob;
            EnumLoc = Ident1;
        }
        if (EnumLoc == Ident1)
        {
            break;
        }
    }
    return IntParIO;
}

Record Proc1(Record PtrParIn)
{
    Record NextRecord = PtrParIn.PtrComp;
    NextRecord.assign(PtrGlb);
    PtrParIn.IntComp = 5;
    NextRecord.IntComp = PtrParIn.IntComp;
    NextRecord.PtrComp = PtrParIn.PtrComp;
    NextRecord.PtrComp = Proc3(NextRecord.PtrComp);
    if (NextRecord.Discr == Ident1)
    {
        NextRecord.IntComp = 6;
        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp);
        NextRecord.PtrComp = PtrGlb.PtrComp;
        NextRecord.IntComp = Proc7(NextRecord.IntComp, 10);
    }
    else
    {
        PtrParIn.assign(NextRecord);
    }
    return PtrParIn;
}

void Proc0()
{
    PtrGlbNext = new Record();
    PtrGlb = new Record();
    PtrGlb.PtrComp = PtrGlbNext;
    PtrGlb.Discr = Ident1;
    PtrGlb.EnumComp = Ident3;
    PtrGlb.IntComp = 40;
    PtrGlb.StringComp = "DHRYSTONE PROGRAM, SOME STRING";
    String String1Loc = "DHRYSTONE PROGRAM, 1'ST STRING";
    Array2Glob[8][7] = 10;

    for (int i = 0; i < loops; ++ i)
    {
        Proc5();
        Proc4();
        int IntLoc1 = 2,
            IntLoc2 = 3,
            EnumLoc = Ident2;
        String String2Loc = "DHRYSTONE PROGRAM, 2'ND STRING";
        BoolGlob = !Func2(String1Loc, String2Loc);
        int IntLoc3 = 0;
        while (IntLoc1 < IntLoc2)
        {
            IntLoc3 = 5 * IntLoc1 - IntLoc2;
            IntLoc3 = Proc7(IntLoc1, IntLoc2);
            ++ IntLoc1;
        }
        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3);
        PtrGlb = Proc1(PtrGlb);
        for (char CharIndex = 65; CharIndex < Char2Glob + 1; ++ CharIndex)
        {
            if (EnumLoc == Func1(CharIndex, 67))
            {
                EnumLoc = Proc6(Ident1);
            }
        }
        IntLoc3 = IntLoc2 * IntLoc1;
        IntLoc2 = IntLoc3 / IntLoc1;
        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1;
        IntLoc1 = Proc2(IntLoc1);
    }
}

public void main()
{
    if (os.args.size() > 1)
    {
        loops = cast<int>(os.args.get(1).parse_long(0));
    }
    double ts = time.time();
    Proc0();
    double tm = time.time() - ts;
    println("Time used: %f sec".(tm));
    println("This machine benchmarks at %f LarStones/second".(cast<double>(loops) / tm));
}
